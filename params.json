{"name":"Corbel-js","tagline":"A SDK for corbel compatible with browsers and node.","body":"corbel-js\r\n=========\r\n\r\n[![Stories in Ready](https://badge.waffle.io/bq/corbel-js.png?label=ready&title=Ready)](https://waffle.io/bq/corbel-js)\r\n[![Build Status](https://api.travis-ci.org/bq/corbel-js.png?branch=master)](http://travis-ci.org/bq/corbel-js)\r\n[![npm version](https://badge.fury.io/js/corbel-js.svg)](http://badge.fury.io/js/corbel-js)\r\n[![Bower version](https://badge.fury.io/bo/corbel-js.svg)](http://badge.fury.io/bo/corbel-js)\r\n[![Coverage Status](https://coveralls.io/repos/bq/corbel-js/badge.svg?branch=master)](https://coveralls.io/r/bq/corbel-js?branch=master)\r\n[![Dependency status](https://david-dm.org/bq/corbel-js/status.png)](https://david-dm.org/bq/corbel-js#info=dependencies&view=table)\r\n[![Dev Dependency Status](https://david-dm.org/bq/corbel-js/dev-status.png)](https://david-dm.org/bq/corbel-js#info=devDependencies&view=table)\r\n\r\nA SDK for corbel compatible with browsers and node.\r\n\r\n## [Homepage](http://opensource.bq.com/corbel-js/)\r\n\r\n## Quickstart\r\n\r\n### Instance a new driver\r\n\r\n```javascript\r\nvar corbelDriver = corbel.getDriver(options);\r\n```\r\n\r\n### Driver options\r\n\r\n```javascript\r\nvar options = {\r\n    'clientId': 'clientId',\r\n    'clientSecret': 'clientSecret',\r\n\r\n    'urlBase': 'http://localhost:8080/{{module}}',\r\n\r\n    'scopes': 'scopes',\r\n\r\n    'device_id'\r\n}\r\n```\r\n\r\n### Get an application token\r\n\r\n```javascript\r\ncorbelDriver.iam.token().create().then(function() {\r\n    return corbelDriver.resources.collection(collectionName).add('application/json', params);\r\n}).then(function(response) {\r\n    var resourceId = response.data;\r\n    return corbelDriver.resources.resource(collectionName, respurceId).get();\r\n}).then(function(response) {\r\n    console.log('resource', response.data);\r\n}).catch(function(error) {\r\n    console.error('some.error', error);\r\n});\r\n```\r\n\r\n\r\n### Resources\r\n\r\nThe Resources API is a flexible programming interface for retrieval of resource's representations. Using the patterns described by this API we can deploy any kind of resource in our Corbel ecosystem with minimal impact on clients and server code. \r\nA request can contain URL parameters which can modify the content of representation returned or its transmission to the client.\r\n Parameter names must be specified on using its canonical form.\r\n\r\n*More info:\r\nhttp://docs.silkroadresources.apiary.io/\r\n\r\nhttps://confluence.bq.com/pages/viewpage.action?title=SilkRoad+-+Resources+API&spaceKey=SILKROAD*\r\n\r\n**Resources API**\r\n\r\nResources is exposed to corbelDriver instance and It has static methods and variables inside corbel namespace:\r\n\r\n* Statics properties and methods in **corbel.Resources**:\r\n  * **create**: Factory **method** for instantiating a Resources object\r\n  * **sort**: Sort **constants object**\r\n    \r\n    ```javascript\r\n    corbel.Resources.sort.ASC\r\n    corbel.Resources.sort.DESC\r\n    ```\r\n\r\n  * **ALL**: **Constant** for use to specify all resources wildcard\r\n    \r\n    ```javascript\r\n    corbel.Resources.ALL\r\n    ```\r\n\r\n* Instance methods\r\n\r\n* **collection**: Collection factory method **collection('collectionName')**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .collection('collectionName')\r\n  ```\r\n\r\n* **resource**: Resource factory method **resource('resourceName',id)**\r\n  \r\n  ```javascript\r\n  corbelDriver.resources\r\n    .resource('resourceName',id)\r\n  ```\r\n\r\n* **relation**: Relation factory method **relation('sourceResourceName', sourceResourceId, 'destResourceName')**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('sourceResourceName', sourceResourceId, 'destResourceName')\r\n  ```\r\n\r\n#### Collection\r\n\r\nA collection is a container of resources that share the same type. For instance:\r\n\r\n*/resource/music:Album => All resources of type music:Album*\r\n\r\n*/resource/book:Book => All resources of type book:Book*\r\n\r\n*/resource/music:Artist => All resources of type music:Artist*\r\n\r\n**Collection API**\r\n\r\n* Factory method\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .collection('collectionName')\r\n  ```\r\n\r\n* **get**: Gets a collection of elements, filtered, paginated or sorted **(requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .collection('collectionName')\r\n    .get(requestOptionsObject)\r\n  ```\r\n\r\n* **add**: Adds a new element to a collection **(objectData,requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .collection('collectionName')\r\n    .add(objectData,requestOptionsObject)\r\n  ```\r\n\r\nExamples: \r\n\r\n```javascript\r\ncollection.add({\r\n    //related data\r\n    name: 'New model name',\r\n    lastName: 'New model last name'\r\n},{\r\n    //request options\r\n}).then(function(idNewModel){ });\r\n```\r\n\r\n**Collection request params API**\r\n\r\n\r\nFollowing params can be passed both as request options object and as chainable methods:\r\n\r\n* Pagination:\r\n\r\n  ```\r\n  { pagination: { page: 1, pageSize: 5 } }\r\n  ```\r\n\r\n* Aggregations:\r\n\r\n  ```\r\n  { aggregation: { count: '*' } }\r\n  ```\r\n\r\n* Sort:\r\n  \r\n  ```\r\n  { sort: { title: corbel.Resources.order.sort } }\r\n  ```\r\n\r\n* Querys:\r\n\r\n  ```\r\n  { query: [{$like: {} }, {$:{} } ] }\r\n  ```\r\n\r\nExamples: \r\n\r\n```javascript\r\nvar collection = corbelDriver.resources\r\n    .collection('books:book');\r\n\r\ncollection.get({\r\n    //request options\r\n    query: [{\r\n    '$like': {\r\n        'name': 'Default name'\r\n    }\r\n}]).then(function(collectionData){ });\r\n\r\ncollection.get({\r\n    //request options\r\n    dataType: 'application/json',\r\n    pagination: {\r\n        page: 1,\r\n        size: 7\r\n    },\r\n    {\r\n        sort: {\r\n            title: corbel.Resources.order.sort\r\n        }\r\n    }\r\n}]).then(function(collectionData){ });\r\n```\r\n\r\n#### Relations\r\n\r\n**Relation API**\r\n\r\n* Factory method\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('resourceName', srcId, 'relationName')\r\n  ```\r\n\r\n* **get**: List elements of a resource's relation **(destId, requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('resourceName',15,'relationName')\r\n    .get(destId, requestOptionsObject)\r\n  ```\r\n\r\n* **add**: Add new relation **(destId, relationData, requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('resourceName',15,'relationName')\r\n    .add(destId, relationData, requestOptionsObject)\r\n  ```\r\n\r\n* **move**: Move a relation **(destId, pos, requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('resourceName',15,'relatio nName')\r\n    .move(destId, pos, requestOptionsObject)\r\n  ```\r\n\r\n* **delete**: Delete a relation **(destId, requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .relation('resourceName',15,'relationName')\r\n    .delete(destId, requestOptionsObject)\r\n  ```\r\n\r\nExamples: \r\n\r\n```javascript\r\nvar relation = corbelDriver.resources\r\n    .relation('books:book','id1','id2');\r\n\r\nrelation.get('destId', {\r\n    //request options\r\n}).then(function(collectionData){ });\r\n\r\nrelation.add('15658', {\r\n    //related data\r\n    name: 'New model name',\r\n    lastName: 'New model last name'\r\n}, {\r\n    //request options\r\n    query: [{\r\n        $eq:{\r\n            'name': 'Juanfran'\r\n        }\r\n    }]\r\n}).then(function(data){ });\r\n\r\nrelation.move('15658','pos', {\r\n    //request options\r\n}).then(function(){ });\r\n\r\nrelation.delete('15658', {\r\n    //request options\r\n}).then(function(){ });\r\n```\r\n\r\n\r\n**Relation request params API**\r\n\r\nThe same request params previously listed in the collection API.\r\n\r\n#### Resources\r\n\r\nA resource is a single object in a collection. For instance\r\n\r\n*/resource/music:Album/123 => The representation of a single object of type music:Album whose identifier is 123*\r\n\r\n\r\n**Resources API**\r\n\r\n* Factory method\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .resource('resourceName', resourceId)\r\n  ```\r\n\r\n* **get**: Get a resource representation **(requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .resource('resourceName',resourceId)\r\n    .get(requestOptionsObject)\r\n  ```\r\n\r\n* **update**: Update a resource **(resourceData, requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .resource('resourceName',resourceId)\r\n    .update(resourceData, requestOptionsObject)\r\n  ```\r\n\r\n* **delete**: Delete a resource **(requestOptionsObject)**\r\n\r\n  ```javascript\r\n  corbelDriver.resources\r\n    .resource('resourceName',resourceId)\r\n    .delete(requestOptionsObject)\r\n  ```\r\n\r\nExamples:\r\n\r\n```javascript\r\nvar resource = corbelDriver.resources\r\n    .resource('books:book', 15);\r\n\r\nresource.get({\r\n    //request options\r\n}).then(function(resourceData){ });\r\n\r\nresource.update('resource', {\r\n    //related data\r\n    name: 'Update model name',\r\n    lastName: 'Update model last name'\r\n}, {\r\n  //request options\r\n}).then(function(data){ });\r\n\r\nresource.delete('resourceId', {\r\n    //request options\r\n}).then(function(){ });\r\n```\r\n\r\n### Chainable API\r\n\r\nYou can use a chainable api to set defaults parameters over any kind of resource:\r\n\r\nExample: \r\n\r\n```javascript\r\nvar collection = corbelDriver.resources\r\n    .collection('books:book');\r\n\r\ncollection\r\n    .like('name','default name')\r\n    .page(5)\r\n    .pageSize(7)\r\n    .get();\r\n```\r\n\r\nThe parameters specified with the chainable api will be removed when a corbel-request is maden.\r\n\r\n```javascript\r\nvar collection = corbelDriver.resources\r\n    .collection('books:book');\r\n\r\ncollection\r\n    .like('name','default name')\r\n    .page(5)\r\n    .pageSize(7)\r\n    .get();\r\n\r\n//Collection doesn't have the defaults chainable params\r\n\r\n//this get request will not use any request params previously defined \r\ncollection.get();\r\n\r\n```\r\n\r\n\r\n## Manage application session\r\n\r\n```javascript\r\n//get value from local storage\r\ncorbelDriver.session.get('key');\r\n\r\n//add value to the local storage\r\ncorbelDriver.session.add('key', value, isPersistent);\r\n\r\n//return true if the session driver is active\r\ncorbelDriver.session.gatekeeper();\r\n\r\n//clear the current session data\r\ncorbelDriver.session.destroy();\r\n\r\n//in nodejs, remove the directory/files of the current session\r\ncorbelDriver.session.removeDir();\r\n```\r\n\r\n## library static methods\r\n\r\n```javascript\r\ncorbel.jwt.generate(claimsObject, secret);\r\ncorbel.request.send(params);\r\ncorbel.Resources\r\n// ... more\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}